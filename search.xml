<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GO分类条形图]]></title>
    <url>%2F2020%2F04%2F02%2FGO%E5%88%86%E7%B1%BB%E6%9D%A1%E5%BD%A2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[R 绘图脚本123456789101112131415161718rm(list = ls())library(ggplot2)windowsFonts(myFont = windowsFont(&quot;Times New Roman&quot;))setwd(&quot;D:\\data\\kegg_go_class&quot;)data &lt;- read.table(&quot;test.DESeq2.goClass.xls.counts&quot;,sep=&apos;\t&apos;,header = T)pdf(file=&quot;test.DESeq2.goClass.pdf&quot;,width=10,height=10)dorder = factor(as.integer(rownames(data)),labels=data$GO_term) #对数据按GO_term排序ggplot(data,aes(x=GO_term,y=Number_of_Genes,fill=GO_category)) + #定义X轴，Y轴的数据和颜色填充 geom_bar(stat=&quot;identity&quot;,position=position_dodge(0.7),width=0.8,aes(x=dorder)) + #定义柱形图的宽度和间距 coord_flip() + #转换横纵坐标 ylim(0,600) + scale_fill_discrete(name=&quot;GO category&quot;) + #修改legend的tittle theme_bw() + theme(panel.grid =element_blank(),axis.text=element_text(size = 10,face = &quot;bold&quot;)) + geom_text(mapping = aes(label = Number_of_Genes),size = 4,hjust = -0.5) + ylab(&quot;Number of genes&quot;) +#修改X轴标签 xlab(&quot;&quot;)dev.off() 绘图结果 测试数据1234567891011121314151617181920212223242526272829303132333435GO_term GO_category Number_of_GenesAging Organismal Systems 42Excretory system Organismal Systems 46Environmental adaptation Organismal Systems 72Sensory system Organismal Systems 78Circulatory system Organismal Systems 80Digestive system Organismal Systems 93Development Organismal Systems 108Endocrine system Organismal Systems 207Immune system Organismal Systems 225Nervous system Organismal Systems 246Biosynthesis of other secondary metabolites Metabolism 6Xenobiotics biodegradation and metabolism Metabolism 14Metabolism of terpenoids and polyketides Metabolism 19Metabolism of cofactors and vitamins Metabolism 23Energy metabolism Metabolism 27Metabolism of other amino acids Metabolism 28Overview Metabolism 34Nucleotide metabolism Metabolism 37Glycan biosynthesis and metabolism Metabolism 40Amino acid metabolism Metabolism 52Carbohydrate metabolism Metabolism 56Lipid metabolism Metabolism 78Transcription Genetic Information Processing 7Replication and repair Genetic Information Processing 9Translation Genetic Information Processing 25Folding, sorting and degradation Genetic Information Processing 55Membrane transport Environmental Information Processing 9Signaling molecules and interaction Environmental Information Processing 229Signal transduction Environmental Information Processing 517Cellular community - prokaryotes Cellular Processes 6Cell motility Cellular Processes 47Cell growth and death Cellular Processes 146Cellular community - eukaryotes Cellular Processes 158Transport and catabolism Cellular Processes 163]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[效率工具集(不定期更新。。。)]]></title>
    <url>%2F2019%2F12%2F19%2F%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Chrome 插件 Saladict 沙拉查词 划词翻译 Adblock Plus Chrono infinity SimpleUndoClose Scholarscope 优秀软件 Everything uTools uTools第三方插件 Snipaste FastStone Capture CopyTranslator SCI-HUB文献神器 向日葵 Power Keys Git VNote Typora ScreenToGif Seer Ditto Dism++ CCleaner LightBulb PotPlayer Atom Sublime Text 3 Office 插件 OneKeyTools iSlide 口袋动画 PPT美化大师 LvyhTools EasyCharts]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python赋值、浅拷贝和深拷贝]]></title>
    <url>%2F2019%2F04%2F14%2Fpython%E8%B5%8B%E5%80%BC%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[简介&emsp;&emsp;python中关于对象复制有三种类型：直接赋值、浅拷贝和深拷贝，他们既有联系又有区别。在python中，“类型”属于“对象”，“变量”是没有“类型”的。所有的变量都可以理解是内存中一个对象的“引用”。所以，我们需要把“变量”和真正的“内存对象”分开。 直接赋值&emsp;&emsp;在python中赋值语句是建立对象的引用值，而不是复制对象。因此，python变量更像是指针，而不是数据存储区域。因此，直接赋值其实就是其实就是对象的引用（别名）。 浅拷贝(copy)拷贝父对象，不会拷贝对象的内部的子对象，浅拷贝仅仅复制了容器中元素的地址。 123456789101112&gt;&gt;&gt; testList = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]&gt;&gt;&gt; testListCopy = testList&gt;&gt;&gt; testList [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testListCopy [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testList.pop(1) ## 删除testList一个元素 &apos;b&apos;&gt;&gt;&gt; testList [&apos;a&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testListCopy ## testListCopy也发生了改变 [&apos;a&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;] 深拷贝(deepcopy)&emsp;&emsp;如果不想出现上面的情况（testListCopy随意testList改变而改变），需要使用深拷贝（deepcopy）方法。&emsp;&emsp;copy模块的deepcopy方法可以完全拷贝了父对象及其子对象。深拷贝不仅仅拷贝了原始对象自身，也对其包含的值进行拷贝，它会递归的查找对象中包含的其他对象的引用，来完成更深层次拷贝。因此，深拷贝产生的副本可以随意修改而不需要担心会引起原始值的改变。 123456789101112131415&gt;&gt;&gt; from copy import deepcopy ## 导入copy模块&gt;&gt;&gt; testList = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]&gt;&gt;&gt; testListDeepCopy = deepcopy(testList)&gt;&gt;&gt; testList [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testListDeepCopy [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testList.pop(0) ## 删除testList中的元素 &apos;a&apos;&gt;&gt;&gt; testList.pop(1) &apos;c&apos;&gt;&gt;&gt; testList [&apos;b&apos;, &apos;d&apos;, &apos;e&apos;]&gt;&gt;&gt; testListDeepCopy ## testListDeepCopy没有发生改变 [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;] 参考链接理解python里的赋值、引用、拷贝及作用域、内存管理、垃圾回收 python基础(5)：深入理解python中的赋值、引用、拷贝、作用域 你真得理解python的浅拷贝和深拷贝吗？]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xmind快捷键详解（思维导图版）]]></title>
    <url>%2F2018%2F11%2F15%2FXmind%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[说明 软件版本：XMind 8 Update 7 操作系统： Windows 10 剪切画： 部分剪切画从外部导入 快捷键]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Xmind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xshell完美连接win10 Linux子系统]]></title>
    <url>%2F2018%2F11%2F08%2Fxshell-%E5%AE%8C%E7%BE%8E%E8%BF%9E%E6%8E%A5win10-Linux%E5%AD%90%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[需求简介自从微软向全世界发布Windows 10下的 Linux子系统Windows Subsystem for Linux(WSL)，WSL为Windows用户提供了巨大的便利，它的诞生可以让开发者们在 Windows 10 下通过 Bash shell 运行原生态的Ubuntu 系统。当然，目前有很多方式在Windows系统下体验和学习Linux系统，主要包括以下几种方式： 虚拟机通过在Windows系统下安装虚拟机Virtual Machine运行Linux系统，是目前比较流行的方式。但是运行虚拟机也有诸多不便，比如：消耗内存大（土豪随意）；划分的硬盘主机无法访问；与主机传输文件容易中断等。 双系统给电脑安装双系统，在电脑启动的时候选择其中一种系统。这种方式对于Windowns深度用户比较麻烦，需要频繁开机更换系统。 服务器租用服务器或购买服务器一般比较昂贵，如果仅仅是学习或偶尔用下完全没必要破费。 Windows 10下Linux子系统通过简单的操作可以激活打开Linux,体验原生态的Ubuntu，前提是能够忍受默认的终端界面（当然是有解决方法的）。 使用xshell登录Linux子系统成功激活WSL后，能够忍受默认的命令终端的可以直接跳过下文。习惯用Linux系统的用户，一般喜欢使用Xshell通过SSH登录Linux系统，然后在界面优美的命令端操作Linux命令。以下来介绍如何完美使用Xshell登录Windows 10 Linux子系统: 查看ip 1ifconfig ## 在Linux子系统默认命令端输入，查看ip地址 配置SSH服务 12345sudo apt-get remove --purge openssh-server ## 先删sshsudo apt-get install openssh-server ## 在安装ssh sudo rm /etc/ssh/ssh_config ## 删配置文件，让ssh服务自己想办法链接sudo service ssh --full-restart 使用xshell登录 上面命令执行完之后，在Xshell中输入用户名和ip就可以通过Xshell登录自己电脑的Linux。 配置永久解决方案通过上面的方法，我们可以通过Xshell登录自己电脑的Linux。但是断开之后重新开机，我们又需要重新配置SSH。因此，我们需要配置以下命令下，一劳永逸。 1sudo service ssh --full-restart ## 将该命令保存为service.sh，存在home目录下 配置好之后，下次开机，只需要在Linux子系统的默认终端运行sh service.sh命令后，关掉终端改用xshell登录即可。 配置自己的环境变量以上设置成功后，可以vim ~/.bashrc配置自己的环境变量，打造自己习惯的界面显示。 参考资料通过 Xshell 连接 ubuntu on windows(WSL)win10上使用Xshell通过ssh连接Linux]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法详解]]></title>
    <url>%2F2018%2F11%2F05%2FMarkdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Markdown简介ps: 本文Markdown语法均在有道云笔记中测试和修改，不同平台显示有所差异。 Markdown概述Markdown是一种轻量级的简单易学的标记语言，通过简单的标记语法，可以使普通文本内容具有一定标记格式。其文本格式为.md类似于html，只不过标签更简单，更易读易写，可以方便转换为html、pdf等格式。Markdown不是一种编程语言，其目标也不会代替html，但是其非常适用于写文档，书写博客等。一旦上手Markdown后，写作会成为一种享受。 Markdown优点 学习成本低，只需要简单掌握十几个符号用法就可以； 纯文本，兼容性强，所有的文本编辑器都支持； 让用户专注于内容而不是排版； Markdown可以随意转换为html，pdf，md格式的； 标记语法具有良好的可读性。 Markdown缺点 对图片的支持度不像word等那么方便； 不同Markdown编辑器语法有细微差别。 Markdown语法标题Markdown中插入不同级别的标题操作非常方便，只需要插入不同数量的#即可。123456789# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题注意： #与标题之间一般需要空一格。备注：以上为Markdown中演示内容，实际书写中呈大小梯度变化。 列表列表分为有序列表和无序列表，两者在实现上有些差异。有序列表顾名思义是有逻辑数字顺序的，如1、2、3等，而无序列表仅仅是以一种无差异符号表示内容的并列关系。 无序列表Markdown中支持多种符号实现无序列表格式化，如-，*，+，其效果均相同。1234567891011121314151617---- aaa- bbb- ccc---* AAA* BBB* CCC---+ 111+ 222+ 333---- aaa # 不同符号之间也可以混用，外观上相同，但间距变大。。。* BBB+ 333--- Markdown下实现效果 aaa bbb ccc AAA BBB CCC 111 222 333 aaa BBB 333 备注： 因为-符号操作最方便只需要按一下按键，建议最好使用-符号实现无序列表。 有序列表同等级有序列表实现同一等级的有序列表，只需要数字加上点号（小数点和英文格式的句号均可以），且与输出的内容中间空一格即可。1234567891011121314------1. aaa2. bbb3. ccc---1. aaa3. ccc2. bbb---111. AAA # 多位数字也可以112. BBB113. CCC--- Markdown下实现效果 aaa bbb ccc aaa ccc bbb AAA BBB CCC 多级有序列表目前，在一般Markdown语法中多等级有序列表没有完美的实现方法，但能通过结合无序列表方法折中解决。1234567891011- 1\. aaa # 注意&apos;.&apos;前要加反斜杠转义。。。 - 1.1 bbb - 1.2 ccc- 2\. bbb - 2.1 aba - 2.2 bab- 3\. ccc - 3.1 aca - 3.2 cac - 3.2.1 eee - 3.2.2 ggg Markdown下实现效果 1. aaa 1.1 bbb 1.2 ccc 2. bbb 2.1 aba 2.2 bab 3. ccc 3.1 aca 3.2 cac 3.2.1 eee 3.2.2 ggg 分割线在Markdown中实现分割线也可以通过-，*，+三种符号完成。具体实现方法如下：123--------- # 可以使用三个以上符号，*和+ 效果相同- - - # 符号之间可以加上多个空格 注意: 使用-插入分割线时，需要与上面的内容之间至少空一行，否则 Markdown会将上一行内容解释为二级标题。 字体修饰Markdown中字体修饰主要包含：字体，加粗，斜体，下划线，大小，上色，背景色等。 字体Markdown中无原生语法修饰字体，但我们可以借鉴HTML语法实现相关效果。123&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt; 我是黑体字我是微软雅黑我是华文彩云 字体加粗Markdown中实现字体加粗方式有以下几种（大家选择顺手的就可以~~~）：1234**加粗** # 推荐用法__加粗__ # 英文状态的下划线&lt;b&gt;加粗&lt;/b&gt; &lt;strong&gt;加粗&lt;/strong&gt; Markdown下实现效果加粗加粗加粗加粗 字体斜体 Markdown中实现斜体也有以下几种方式：123*斜体* _斜体_ &lt;em&gt;斜体&lt;/em&gt; 斜体_斜体_斜体 下划线Markdown中并无原生语法的实现下划线，但可以借鉴HTML和css中的用法。1234++下划线++ # 有道云中可以实现&lt;u&gt;下划线&lt;/u&gt; &lt;span style=&quot;border-bottom:2px dashed red;&quot;&gt;下划线&lt;/span&gt; &lt;span style=&quot;border-bottom:2px solid red;&quot;&gt;下划线&lt;/span&gt; Markdown下实现效果++下划线++下划线下划线下划线 字体大小借鉴HTML语法可以在Markdown中调整字体大小。12&lt;font size=4&gt;字体大小&lt;/font&gt; &lt;font size=6&gt;字体大小&lt;/font&gt; 字体大小字体大小 字体上色借鉴HTML语法也可以在Markdown中实现字体上色效果。12&lt;font color=gray size=4&gt;字体上色&lt;/font&gt; &lt;font color=red size=4&gt;字体上色&lt;/font&gt; Markdown下实现效果 字体上色字体上色 字体背景色Markdown中也无原生语法的实现下划线，但有道云中可以通过以下方式实现：1==字体背景色== # 有道云中可以，其他平台还未测试 Markdown下实现效果==字体背景色== 代码行代码单行代码引用使用单个符号（符号位于ESC键下方），实现代码着色。Markdown`下实现效果1`行代码`,`Markdown` 行代码,Markdown 代码块将代码置于1`Markdown`下实现效果 ​显示需要，Markdown中不需要加123代码块代码块​``` # 显示需要，Markdown中不需要加 12代码块代码块 引用Markdown中引用的符号是&gt;，使用时&gt;与引用内容间要空一格。大概可分为普通引用和嵌套引用，具体使用方法如下： 普通引用Markdown下实现效果1234567&gt; 引用内容1 引用内容2 # 引用内容后不空行的话，后面均为引用内容，只需要在第一行加上&apos;&gt;&apos;符号即可。引用内容3&gt; 引用内容a &gt; 引用内容b &gt; 引用内容c 引用内容1引用内容2引用内容3 引用内容a引用内容b引用内容c 嵌套引用在引用中加入不同数量的&gt;符号可以表示不同等级。Markdown下实现效果 123&gt; 引用1 #从少到多可以直接实现，如果多到少则不能实现（ps有道云）。&gt;&gt; 引用2 &gt;&gt;&gt; 引用3 引用1 引用2 引用3 引用内修饰引用内容内也可以加入字体加粗、代码引用等语法修饰，突出显示内容。Markdown下实现效果 123&gt; **加粗** &gt; *斜体* &gt; `代码` 加粗斜体代码 链接1234[百度](http://www.baidu.com)[百度](http://www.baidu.com &quot;这是备注&quot;) # 可以添加备注&lt;http://www.baidu.com/&gt; # 自动链接 &lt;fangj@163.com&gt; # 也可以通过链接方式自动生成电子邮件 百度百度http://www.baidu.com/&#x66;&#x61;&#x6e;&#103;&#x6a;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#x6d; 图片Markdown中图片插入的方式与和链接非常相似，差别只是在[]前加上！。如果要在网络上分享文章，需要提前将图片放到图床上，获得图片的链接，当然也可以直接在网络上寻找图片。如果只是在本地查看，则可以根据图片相对路径或绝对路径插入到文中。12![星空](http://seopic.699pic.com/photo/50021/5261.jpg_wh1200.jpg)![星空](http://seopic.699pic.com/photo/50021/5261.jpg_wh1200.jpg &quot;备注&quot;) # 也可以备注信息 参考链接 献给写作者的 Markdown 新手指南front-end-study from githubMarkdown使用笔记CSDN-markdown编辑器语法——字体、字号与颜色Learning-Markdown (Markdown 入门参考)]]></content>
      <categories>
        <category>技术学习</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
